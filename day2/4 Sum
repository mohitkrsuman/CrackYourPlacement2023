class Solution {
    
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        // int n = nums.size();
        // vector<vector<int>> ans;
        // for(int i = 0; i < n-3; i++){
        //     for(int j = i + 1; j < n-2; j++){
        //         for(int k = j + 1; k < n-1; k++){
        //             for(int l = k+1; l < n; l++){
        //                 if(nums[i] + nums[j] + nums[k] + nums[l] == target){
        //                     vector<int> temp = {nums[i], nums[j], nums[k], nums[l]};
        //                     ans.push_back(temp);
        //                 }
        //             }
        //         }
        //     }
        // }
        // return ans;
        
        // Approach- 2> Optimised Approach
        if(nums.size()<4) return {};
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());
        
        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                long long target_2 = target - nums[i];
                target_2 -= nums[j];
                int k = j+1;
                int l = nums.size()-1;
                while(k<l){
                    int two_sum = nums[k] + nums[l];
                    if(two_sum<target_2) k++;
                    else if(two_sum>target_2) l--;
                    else{
                        result.push_back({nums[i], nums[j], nums[k], nums[l]});
                        while(k<l && nums[k]==result[result.size()-1][2]) k++;
                        while(k<l && nums[l]==result[result.size()-1][3]) l--;
                    }
                }
                while(j+1<nums.size() && nums[j]==nums[j+1]) j++;
            }
            while(i+1<nums.size() && nums[i]==nums[i+1]) i++;
        }
        return result;

    }
};
