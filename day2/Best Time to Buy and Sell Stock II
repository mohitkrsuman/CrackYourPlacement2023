#include<bits/stdc++.h>
class Solution {
    int solveMemo(int idx, int buy, vector<int> &prices, int n, vector<vector<int>> &dp){
        if(idx == n) return 0;
        int profit = 0;
        
        if(dp[idx][buy] != -1) return dp[idx][buy];
        
        if(buy){
            profit = max(-prices[idx] + solveMemo(idx+1, 0, prices, n, dp), 0 + solveMemo(idx+1, 1, prices, n, dp));
        }else{
            profit = max(prices[idx] + solveMemo(idx+1, 1, prices, n, dp), 0 + solveMemo(idx+1, 0, prices, n, dp));
        }
        return dp[idx][buy] = profit;
    }
    
    int solveTab(vector<int> &prices){
        int n = prices.size();
        vector<vector<int>> dp(n+1, vector<int>(2, 0));
        dp[n][0] = dp[n][1] = 0;
        
        for(int idx = n-1; idx >= 0; idx--){
            for(int buy = 0; buy <= 1; buy++){
                int profit = 0;
                if(buy){
                    profit = max(-prices[idx] + dp[idx+1][0], 0 + dp[idx+1][1]);
                }else{
                    profit = max(prices[idx] + dp[idx+1][1], 0 + dp[idx+1][0]);
                }
                dp[idx][buy] = profit;
            }
        }
        return dp[0][1];
    }
    
    int solveSpace(vector<int> &prices){
        int n = prices.size();
        vector<int> ahead(2, 0), curr(2, 0);
        
        ahead[0] = ahead[1] = 0;
        
        for(int idx = n-1; idx >= 0; idx--){
            for(int buy = 0; buy <= 1; buy++){
                int profit = 0;
                if(buy){
                    profit = max(-prices[idx] + ahead[0], 0 + ahead[1]);
                }else{
                    profit = max(prices[idx] + ahead[1], 0 + ahead[0]);
                }
                curr[buy] = profit;
            }
            ahead = curr;
        }
        return ahead[1];
    }
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        // as there are only two ways either you can buy or sell
        vector<vector<int>> dp(n, vector<int>(2, -1));
        // return solveMemo(0, 1, prices, n, dp);
        // return solveTab(prices);
        return solveSpace(prices);
    }
};
