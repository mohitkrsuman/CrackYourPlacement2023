// Top down approach
class Solution {
    int solveMemo(int i, int j, string &s, string &t, vector<vector<int>> &dp){
        if(j == 0) return 1;   // it means all the char of t has been found
        if(i == 0) return 0;   // it means we don't have enough character to search
        
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
        if(s[i] == t[j]){
            return dp[i][j] = solveMemo(i-1, j-1, s, t, dp) + solveMemo(i-1, j, s, t, dp);
        }
        
        return dp[i][j] = solveMemo(i-1, j, s, t, dp);
    }
    
    int solveTab(string s, string t){
        int n = s.size();
        int m = t.size();
        vector<vector<double>> dp(n+1, vector<double>(m+1, 0));
        
        for(int i = 0; i <= n; i++) dp[i][0] = 1;
        // for(int j = 1; j <= m; j++) dp[0][j] = 0;
        
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(s[i-1] == t[j-1]){
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return (int)dp[n][m];
    }
    
    int solveSpace(string s, string t){
        int n = s.size();
        int m = t.size();
        vector<double> prev(m+1, 0), curr(m+1, 0);
        
        prev[0] = curr[0] = 1;
        // for(int j = 1; j <= m; j++) dp[0][j] = 0;
        
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(s[i-1] == t[j-1]){
                    curr[j] = prev[j-1] + prev[j];
                }else{
                    curr[j] = prev[j];
                }
            }
            prev = curr;
        }
        return (int)prev[m];
    }
public:
    int numDistinct(string s, string t){
        int n = s.size();
        int m = t.size();
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        
        // return solveMemo(n, m, s, t, dp);
        // return solveTab(s, t);
        return solveSpace(s, t);
    }
};


