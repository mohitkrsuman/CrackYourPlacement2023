class Solution {
public:
    // We have to find minimum window in string s in which string t exist
    
    string minWindow(string s, string t){
        int n = s.length();
        unordered_map<char, int> letters;
        for(auto ch : t){
            letters[ch]++;
        }
        int low = 0;
        int cnt = 0, min_len = INT_MAX, min_start = 0;
        
        for(int high = 0; high < n; high++){
            if(letters[s[high]] > 0) cnt++;
            letters[s[high]]--;
            
            if(cnt == t.length()){
                while(low < high && letters[s[low]] < 0){
                    letters[s[low]]++;
                    low++;
                }
                
                if(min_len > high - low + 1){
                    min_len = high - low + 1;
                    min_start = low;
                }
                
                letters[s[low++]]++;
                cnt--;
            }
        }
        
        return min_len == INT_MAX ? "" : s.substr(min_start, min_len);
    }
    
    
//     string minWindow(string s, string t) {
        
//        int n = s.length();
//        unordered_map<int,int> letters;
//        for(auto ch : t){
//            letters[ch]++;
//        }
//        int cnt = 0;
//        int low = 0, min_len = INT_MAX, min_start = 0;

//        for(int high = 0; high < n; high++){
//            if(letters[s[high]] > 0) cnt++;
//            // take useless to the -ve and useful to 0
//            letters[s[high]]--;
           
//            if(cnt == t.length()){
               
//                // remove useless
//                while(low < high && letters[s[low]] < 0){
//                    letters[s[low]]++;
//                    low++;
//                }
//                // update length
//                if(min_len > high - low + 1){
//                    min_start = low;
//                    min_len = high - low + 1;
//                }
               
//                // remove useful one
//                letters[s[low++]]++;
//                cnt--;
//            }
//        }
        
//         return min_len == INT_MAX ? "" : s.substr(min_start, min_len);
//     }
};
