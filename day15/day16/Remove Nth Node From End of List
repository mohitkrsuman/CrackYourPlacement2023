/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    int length(ListNode *head){
        ListNode *temp = head;
        int count = 0;
        
        while(temp != NULL){
            count++;
            temp = temp->next;
        }
        
        return count;
    }
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
//         if(length(head) == 1 && n==1){
//             head = NULL;
//             return head;
//         }
//         int len = length(head);
//         int nthNode = len - n;
        
//         ListNode *_next = NULL, *prev = NULL;
//         ListNode *current = head;
//         int num = 0;
        
//         while(num != nthNode){
//             prev = current;
//             current = current->next;
//             _next = current->next->next;
//             num++;
//         }
//         prev->next = current->next;
        
 
        
//         return head;
        ListNode *fast = head, *slow = head;
        for (int i = 0; i < n; i++){
           fast = fast->next;  
        }
        if (!fast){
           return head->next;   
        } 
        while (fast->next){
            fast = fast->next;
            slow = slow->next;
        }
        slow->next = slow->next->next;
        return head;
    }
};
