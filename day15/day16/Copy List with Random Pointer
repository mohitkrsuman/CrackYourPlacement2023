/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
//
private:
    void insertAtTail(Node *head, Node *tail, int data){
        Node *newNode = new Node(data);
        if(head == NULL){
            head = newNode;
            tail = newNode;
            return;
        }else{
            tail->next = newNode;
            tail = newNode;
        }
    }
public:
    Node* copyRandomList(Node* head) {
        // step-1> Create a clone only for next
//         Node *cloneHead = NULL;
//         Node *cloneTail = NULL;
        
//         Node *temp = head;
//         while(temp != NULL){
//             insertAtTail(cloneHead, cloneTail, temp->val);
//             temp = temp->next;
//         }
        
//         // step-2> clonning random using hashmap
//         unordered_map<Node*, Node*>oldToNew;
        
//         Node *originalNode = head;
//         Node *cloneNode = cloneHead;
//         while(originalNode != NULL && cloneNode != NULL){
//             oldToNew[originalNode] = cloneNode;;
//             originalNode = originalNode->next;
//             cloneNode = cloneNode->next;
//         }
        
//         originalNode = head;
//         cloneNode = cloneHead;
        
//         while(originalNode != NULL){
//             cloneNode->random = oldToNew[originalNode->random];
//             originalNode = originalNode->next;
//             cloneNode = cloneNode->next;
//         }
        
//         return cloneNode;
        
        
        unordered_map<Node*, Node*> map;
        int i = 0;
        Node *temp = head;
        
        while(temp != NULL){
            map[temp] = new Node(temp->val);
            temp = temp->next;
        }
        
        // Now we mapped to copy node to original node now we have to link the nodes
        temp = head;
        while(temp != NULL){
            map[temp]->next = map[temp->next];
            map[temp]->random = map[temp->random];
            temp = temp->next;
        }
        
        return map[head];
        
    }
};
