/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* prev;
    Node* next;
    Node* child;
};
*/

class Solution {
public:
    Node* flatten(Node* head) {
       if(head == NULL){
           return NULL;
       }
        
        Node *p = head;
        while(p != NULL){
            // case-1> if there is No child, then proceed
            if(p->child == NULL){
                p = p->next;
                continue;
            }
            
            // case-2> Got child, find the tail of the child and link it to p->next
            Node *temp = p->child;
            
            // find the tail of the child;
            while(temp->next != NULL){
                temp = temp->next;
            }
            
            // connect tail with p->next if is not null
            temp->next = p->next;
            if(p->next != NULL){
                p->next->prev = temp;
            }
            
            //connect p with p->child and remove p->child
            
            p->next = p->child;
            p->child->prev = p;
            p->child = NULL;
        }
        return head;
    }
};
