#include <bits/stdc++.h>
#include <unordered_map>
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
   // Approach-1>
        unordered_map<int, int> map;
        vector<int> ans;
        for(int i = 0; i < nums.size(); i++){
            int k = target - nums[i];
            
            if(map.find(k) != map.end()){ // map.count(k) is same as map.find(k) != map.end();
                ans.push_back(map[k]);   // map[k] is giving index
                ans.push_back(i);
                
                return ans;
            }
            
            map[nums[i]] = i;
        }
            return ans;
        
      // Approach-2>
//          vector<pair<int, int>> v;
//         for(int i = 0; i < nums.size(); i++){
//             v.push_back({nums[i], i});
//         }
        
//         sort(v.begin(), v.end());
//         int start = 0, end = nums.size() - 1;
        
//         while(start < end){
//             int sum = v[start].first + v[end].first;
//             if(sum == target){
//                 return {v[start].second, v[end].second};
//             }else if(sum > target){
//                 end--;
//             }else{
//                 start++;
//             }
//         }
        
//         return {-1, -1};

    }
};
