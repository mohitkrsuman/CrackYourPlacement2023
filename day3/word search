class Solution {
private:
    bool dfs(vector<vector<char>> &board, int i, int j, int count, string word){
        if(count == word.size()){
            return true;
        }
        // Base Case if we apply dfs first row, col
        if(i == -1 || i == board.size() || j == -1 || j == board[0].size() || board[i][j] != word.at(count)){
            return false;
        }
        
        char temp = board[i][j];
        board[i][j] = '*';
        
        bool found = dfs(board, i+1, j, count+1, word) ||   //up
                     dfs(board, i, j+1, count+1, word) ||   // right
                     dfs(board, i-1, j, count+1, word) ||   // down
                     dfs(board, i, j-1, count+1, word);     // left
        board[i][j] = temp;
        return found;
    }
public:
    bool exist(vector<vector<char>>& board, string word) {
        int row = board.size();
        int col = board[0].size();
        
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(board[i][j] == word.at(0) && dfs(board, i, j, 0, word)){
                    return true;
                }
            }
        }
        return false;
    }
};
