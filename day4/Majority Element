class Solution {
public:
    int majorityElement(vector<int>& nums) {
  /*      // Approach-1>Time Complexity O(N), Space Complexity = O(N)
        unordered_map<int, int> map;
        int n = nums.size();
        for(int i = 0; i < n; i++){
            map[nums[i]]++;
        }
        int ans;
        for(auto x : map){
            if(x.second > n/2){
                ans = x.first;
                break;
            }
        }
        
        return ans;
        
        // Approach-2> Using Sorting
        
        int n = nums.size();
        sort(nums.begin(), nums.end());
        return nums[n/2];
        
        // Approach-3>
        int candidate = 0, votes = 0;
        
        for(auto a : nums){
            if(votes == 0){
                candidate = a;
            }
            if(candidate == a){
               votes++;
            }else{
               votes--;
            }
        }
        return candidate; 
*/
        int votes = 0, candidate = -1, i;
        int n = nums.size();
        for(i = 0; i < n; i++){
            if(votes == 0){
                candidate = nums[i];
                votes = 1;
            }else{
                if(nums[i] == candidate){
                    votes++;
                }else{
                    votes--;
                }
            }
        }
        
        int count = 0;
        for(i = 0; i < n; i++){
            if(nums[i] == candidate){
                count++;
            }
        }
        
        if(count > (n/2)){
            return candidate;
        }
        return -1;
        
        
    }
};
