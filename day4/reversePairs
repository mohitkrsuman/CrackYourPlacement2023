class Solution {
private:
    int countPairs(vector<int> &arr, int low, int mid, int high){
        int right = mid+1;
        int cnt = 0;
        // (low -> mid) shows left part
        
        for(int i = low; i <= mid; i++){
            while(right <= high && arr[i] > (long)2*arr[right]) right++;
            cnt += (right - (mid+1));
        }
        return cnt;
    }
    
    void merge(vector<int> &nums, int low, int mid, int high){
        vector<int> temp;
        int left = low, right = mid+1;
        
        while(left <= mid && right <= high){
            if(nums[left] < nums[right]){
                temp.push_back(nums[left]);
                left++;
            }else{
                temp.push_back(nums[right]);
                right++;
            }
        }
        
        while(left <= mid){
            temp.push_back(nums[left]);
            left++;
        }
        while(right <= high){
            temp.push_back(nums[right]);
            right++;
        }
        
        for(int i = low; i <= high; i++){
            nums[i] = temp[i-low];
        }
    }

    int mergeSort(vector<int> &nums, int low, int high){
        int cnt = 0;
        if(low >= high){
            return 0;
        }
        int mid = (low + high)/2;
        cnt += mergeSort(nums, low, mid);
        cnt += mergeSort(nums, mid+1, high);
        cnt += countPairs(nums, low, mid, high);
        merge(nums, low, mid, high);
        
        return cnt;
    }
    

public:
    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        if(n <= 1){
            return 0;
        }
        int cnt = mergeSort(nums, 0, n-1);
        return cnt;
    }
};
