class TrieNode{
public:
    TrieNode *links[26];
    int childCount;
    bool flag;
    char data;

    TrieNode(char ch){
        ch = data;
        flag = false;
        childCount = 0;
        for(int i = 0; i < 26; i++){
            links[i] = NULL;
        }
    }
    
    bool containKey(char ch){
        return links[ch - 'a'] != NULL;
    }
    
    void put(char ch, TrieNode *node){
        links[ch-'a'] = node;
    }
    
    TrieNode* get(char ch){
        return links[ch-'a'];
    }
    
    void setEnd(){
        flag = true;
    }
    
    bool isEnd(){
        return flag;
    }
    

};

class Trie{
public:
    TrieNode *root;
    Trie(char ch){
        root = new TrieNode(ch);
    }
    
    void insert(string word){
        TrieNode *node = root;
        
        if(word.length() == 0){
            node->setEnd();
        }
        
        for(auto ch : word){
            if(!node->containKey(ch)){
                node->put(ch, new TrieNode(ch));
                node->childCount++;
            }
            node = node->get(ch);
        }
        
        node->setEnd();
    }
    
    
    string lcp(string word){
        string ans = "";
        TrieNode *node = root;
        
        for(int i = 0; i < word.length(); i++){
            if(node->childCount == 1){
                ans += word[i];
                node = node->get(word[i]);
            }else{
                break;
            }
            
            if(node->isEnd()){
                break;
            }
        }
        
        return ans;
    }
    
};


class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
//         int n = strs.size();
//         string ans = "";
//         bool match = true;
//         for(int i = 0; i < strs[0].size(); i++){
//             char ch = strs[0][i];
            
//             for(int j = 1; j < n; j++){
//                 if(ch != strs[j][i] || strs[j].size() < i){
//                     match = false;
//                     break;
//                 }
//             }
//             if(match == false){
//                 break;
//             }else{
//                 ans += ch;
//             }
//         }
//         return ans;
        Trie *tr = new Trie('/');
        for(auto str : strs){
            if(str == "") return "";
            tr->insert(str);
        }
        
        return tr->lcp(strs[0]);
        
        
    }
};
